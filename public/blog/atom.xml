<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>BLOG_NAME</title>
 <link href="YOUR_URL/atom.xml" rel="self"/>
 <link href="YOUR_URL"/>
 <updated>2013-02-22T17:26:30-05:00</updated>
 <id>BLOG_URL</id>
 <author>
   <name>BLOG_NAME</name>
 </author>

 
 <entry>
   <title>JVM Platform Usefulness</title>
   <link href="YOUR_URL/jvm-platform-usefulness.html"/>
   <updated>2013-02-21T00:00:00-05:00</updated>
   <id>BLOG_URL/jvm-platform-usefulness</id>
   <content type="html">&lt;p&gt;I have been reacquainting myself with some of the JVM internals. None of this knowledge directly changes how I work day to day, but it's still useful to know when the situation arises. I'm writing this one so I have a nice summary for myself. For a good read that covers these topics in more detail, I suggest reading &quot;The Well-Grounded Java Developer - Evans &amp;amp; Verburg.&quot;&lt;/p&gt;

&lt;h1&gt;Classloading&lt;/h1&gt;

&lt;p&gt;Classloading is the process by which the JVM loads custom code and types. When you compile your &lt;em&gt;.java source, you end up with &lt;/em&gt;.class files. These *.class file contain bytecode, which I'll talk more about in a bit. For the JVM to create a new instance of your custom type, the .class file needs to be loaded and linked. Loading happens when the JVM reads the byte stream from disk that lives in the .class file, and then creates an instance of the 'Class' type. The next step is Linking, which happens in 4 phases (Verification, Preparation, Resolution, and Initialization). Verification checks things such access controls, type validations, and bytecode stack checks. Once the class passes verification, it moves to preparation where memory is allocated as needed. During resolution, any other classes that are referenced are resolved. This too can lead to more class loading. Finally, the variables allocated in the resolution stage are initialized. Once the .class is linked and loaded, new instances can be created. These instances of type 'Class' provide access to methods, fields and constructors of the class. This functionality is relied upon for reflection.&lt;/p&gt;

&lt;p&gt;The JVM takes care of class loading with Classloaders. There are a few, and they run in sequence. Some are platform, and other can be custom written.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primordial, Extension and Application are platform classloaders&lt;/li&gt;
&lt;li&gt;EE and Framework classloaders are examples of custom classloaders&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Custom class loaders typically massage bytecode to weave in extra functionality such as instrumentation or dependency injection.&lt;/p&gt;

&lt;h1&gt;Bytecode&lt;/h1&gt;

&lt;p&gt;Every language the runs on the JVM is converted to bytecode during the compilation process. Every operation fits in a byte (less than 256 operations), thus the name Bytecode. It's is not java specific, though java turns into bytecode. Bytecode is an intermediate representation that is not machine dependent, and is not as readable or writable as the higher level languages that compile down into bytecode. For example, looping and conditionals don't exist and are replaced with branch instructions. The JVM is responsible for executing bytecode. It's also responsible for making optimizations. Code sections that run often, can be compiled on the fly into machine code. This process is referred to as JIT (Just in-time Compilation)&lt;/p&gt;

&lt;p&gt;Here is a link to a list of &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings&quot;&gt;bytecode operations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to view the bytecode generated by your class, you can use 'javap' which ships with the jdk.&lt;/p&gt;

&lt;p&gt;If you look at the .class containing the java code, this is what you would see. I didn't modify it all.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ByteCodeTutorial {
    private static ByteCodeTutorial instance = null;
    public static void main(String args[]){
        instance = new ByteCodeTutorial();
        System.out.println(instance + &quot; carlo &quot;);
        for(int i=0; i &amp;lt; 5; i++){
            System.out.println(i);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
  Constant pool:
const #1 = class  #2;   //  ByteCodeTutorial
const #2 = Asciz  ByteCodeTutorial;
const #3 = class  #4;   //  java/lang/Object
const #4 = Asciz  java/lang/Object;
const #5 = Asciz  instance;
const #6 = Asciz  LByteCodeTutorial;;
const #7 = Asciz  &lt;clinit&gt;;
const #8 = Asciz  ()V;
const #9 = Asciz  Code;
const #10 = Field #1.#11;  //  ByteCodeTutorial.instance:LByteCodeTutorial;
const #11 = NameAndType #5:#6;//  instance:LByteCodeTutorial;
const #12 = Asciz LineNumberTable;
const #13 = Asciz LocalVariableTable;
const #14 = Asciz &lt;init&gt;;
const #15 = Method   #3.#16;  //  java/lang/Object.&quot;&lt;init&gt;&quot;:()V
const #16 = NameAndType #14:#8;//  &quot;&lt;init&gt;&quot;:()V
const #17 = Asciz this;
const #18 = Asciz main;
const #19 = Asciz ([Ljava/lang/String;)V;
const #20 = Method   #1.#16;  //  ByteCodeTutorial.&quot;&lt;init&gt;&quot;:()V
const #21 = Field #22.#24; //  java/lang/System.out:Ljava/io/PrintStream;
const #22 = class #23;  //  java/lang/System
const #23 = Asciz java/lang/System;
const #24 = NameAndType #25:#26;//  out:Ljava/io/PrintStream;
const #25 = Asciz out;
const #26 = Asciz Ljava/io/PrintStream;;
const #27 = class #28;  //  java/lang/StringBuilder
const #28 = Asciz java/lang/StringBuilder;
const #29 = Method   #27.#16; //  java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V
const #30 = Method   #27.#31; //  java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
const #31 = NameAndType #32:#33;//  append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
const #32 = Asciz append;
const #33 = Asciz (Ljava/lang/Object;)Ljava/lang/StringBuilder;;
const #34 = String   #35;  //   carlo
const #35 = Asciz  carlo ;
const #36 = Method   #27.#37; //  java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #37 = NameAndType #32:#38;//  append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #38 = Asciz (Ljava/lang/String;)Ljava/lang/StringBuilder;;
const #39 = Method   #27.#40; //  java/lang/StringBuilder.toString:()Ljava/lang/String;
const #40 = NameAndType #41:#42;//  toString:()Ljava/lang/String;
const #41 = Asciz toString;
const #42 = Asciz ()Ljava/lang/String;;
const #43 = Method   #44.#46; //  java/io/PrintStream.println:(Ljava/lang/String;)V
const #44 = class #45;  //  java/io/PrintStream
const #45 = Asciz java/io/PrintStream;
const #46 = NameAndType #47:#48;//  println:(Ljava/lang/String;)V
const #47 = Asciz println;
const #48 = Asciz (Ljava/lang/String;)V;
const #49 = Method   #44.#50; //  java/io/PrintStream.println:(I)V
const #50 = NameAndType #47:#51;//  println:(I)V
const #51 = Asciz (I)V;
const #52 = Asciz args;
const #53 = Asciz [Ljava/lang/String;;
const #54 = Asciz i;
const #55 = Asciz I;
const #56 = Asciz StackMapTable;
const #57 = Asciz SourceFile;
const #58 = Asciz ByteCodeTutorial.java;
&lt;/code&gt;&lt;/pre&gt;


&lt;br&gt;


&lt;pre&gt;
&lt;code&gt;
$javap -c ByteCodeTutorial
Compiled from &quot;ByteCodeTutorial.java&quot;
public class ByteCodeTutorial extends java.lang.Object{
static {};
  Code:
   0:   aconst_null
   1:   putstatic   #10; //Field instance:LByteCodeTutorial;
   4:   return

public ByteCodeTutorial();
  Code:
   0:   aload_0
   1:   invokespecial   #15; //Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
   4:   return

public static void main(java.lang.String[]);
  Code:
   0:   new #1; //class ByteCodeTutorial
   3:   dup
   4:   invokespecial   #20; //Method &quot;&lt;init&gt;&quot;:()V
   7:   putstatic   #10; //Field instance:LByteCodeTutorial;
   10:  getstatic   #21; //Field java/lang/System.out:Ljava/io/PrintStream;
   13:  new #27; //class java/lang/StringBuilder
   16:  dup
   17:  invokespecial   #29; //Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V
   20:  getstatic   #10; //Field instance:LByteCodeTutorial;
   23:  invokevirtual   #30; //Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
   26:  ldc #34; //String  carlo
   28:  invokevirtual   #36; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   31:  invokevirtual   #39; //Method java/lang/StringBuilder.toString:()Ljava/lang/String;
   34:  invokevirtual   #43; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   37:  iconst_0
   38:  istore_1
   39:  goto    52
   42:  getstatic   #21; //Field java/lang/System.out:Ljava/io/PrintStream;
   45:  iload_1
   46:  invokevirtual   #49; //Method java/io/PrintStream.println:(I)V
   49:  iinc    1, 1
   52:  iload_1
   53:  iconst_5
   54:  if_icmplt   42
   57:  return
}
&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;I'm not going to walk thru this bytecode, but looking at this small code you can map it by looking up what opcodes do. I will highlight a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The constant table is self referential, each index is 2 bytes long&lt;/li&gt;
&lt;li&gt;The numbers on the left column, under 'Code:' represents the byte number in that sequence. As an example, in the main method the 0 byte is a 'new' opcode. Bytes 1 and 2, are constant index point to entry #1 in the constant table.&lt;/li&gt;
&lt;li&gt;Entry #1 in the constant table is a class, named ByteCodeTutorial. You can figure out the names by following the links&lt;/li&gt;
&lt;li&gt;You can see that string concatenation creates a new StringBuilder. This is why you should always just create a StringBuilder if you're going to be doing a bunch of concats.&lt;/li&gt;
&lt;li&gt;You can see there is no looping&lt;/li&gt;
&lt;li&gt;You can also see the constant pool by running javap -verbose&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Measure it on the JVM, Yammer Metrics + Graphite = Winning</title>
   <link href="YOUR_URL/measure-it.html"/>
   <updated>2013-02-15T00:00:00-05:00</updated>
   <id>BLOG_URL/measure-it</id>
   <content type="html">&lt;p&gt;You're application/service should have an SLA, goal setting is important in all walks of life. A good example SLA is &quot;My service will send a response within 300ms for 99.9% of requests for a peak client load of 500 requests per second.&quot; Amazon's Dynamo paper makes a good argument for defining SLAs that cover the entire bell curve, rather than the mean. Basically, you want all of your customer's to have a good experience, not some of them&lt;/p&gt;

&lt;p&gt;Now that you have you're SLA, how do you know if you're delivering on you're agreement? You have to measure, and track those measurements. You can not performance tune without measuring, other wise that's just called guessing. Now that you are convinced you need it. How do you do it?&lt;/p&gt;

&lt;p&gt;For metrics gathering on the JVM, I recommend you use Yammer Metrics. It's really simple to use, and it's well described &lt;a href=&quot;http://metrics.codahale.com/getting-started/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why I like it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has Histograms!!&lt;/li&gt;
&lt;li&gt;It has everything I ever needed: counters, gauges, histograms, and timers.&lt;/li&gt;
&lt;li&gt;It automatically integrates with jvisualvm using JMX&lt;/li&gt;
&lt;li&gt;It easy to ship your metrics to logs or graphite on a timer. For the latter there is basically a timer thread pumping metrics via UDP to the Graphite daemon&lt;/li&gt;
&lt;li&gt;If you use DropWizard, you can get metrics with a quick annotation of your endpoint: @Timed&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What I don't like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;zip, zero, &amp;amp; nada. It's frigg'n awesome!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For tracking your metrics, I like Graphite. It's basically a time series db for numerical values with a view layer. More info &lt;a href=&quot;http://graphite.wikidot.com/&quot;&gt;here&lt;/a&gt;. Graphite doesn't care who sends it data, so the metrics don't have to come from Yammer Metrics or the JVM. Basically anything that can open a socket can get data to into graphite, you just need to send the data in a structured format. This makes it very useful for tracking anything.&lt;/p&gt;

&lt;p&gt;Why I like it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can track your historical data and create pretty pictures&lt;/li&gt;
&lt;li&gt;You can feed it from many sources&lt;/li&gt;
&lt;li&gt;It's scalable&lt;/li&gt;
&lt;li&gt;It's extremely useful&lt;/li&gt;
&lt;li&gt;You can create dashboards, and go nuts with D3/Cubism.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What I don't like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's not easy to get installed, especially if you want Python3. If you don't wan't to host it your self, it exists as a &lt;a href=&quot;https://www.hostedgraphite.com/&quot;&gt;service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;It's more infra to maintain &amp;amp; support&lt;/li&gt;
&lt;li&gt;The web UX experience leaves a bit to be desired&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Ditching Your LB</title>
   <link href="YOUR_URL/ditchingyourlb.html"/>
   <updated>2013-02-14T00:00:00-05:00</updated>
   <id>BLOG_URL/ditchingyourlb</id>
   <content type="html">&lt;p&gt;Yesterday I went to a tech talk given at &lt;a href=&quot;http://www.appnexus.com/&quot; title=&quot;AppNexus&quot;&gt;AppNexus&lt;/a&gt; by @pemerson that was focused on their experiences with Load Balancers (LBs). They went from relying heavily on LBs for routing their traffic to not relying on them at all. This talk was extremely relevant, as our team has had poor LB experiences. Specifically, our problems were caused by vendor reliability. Multiple misconfigurations have led to outages. Below I will summarize the take aways, but first I want to state my stance on owning your own LB infra.&lt;/p&gt;

&lt;p&gt;This is a decision not to be taking lightly, devs tend to think they can roll their own better solution. While this may be true, especially for a limited set of functionality, it's important to balance that with the cost of maintenance, SLAs, and team skills. I would recommend dealing with vendors until you really can't anymore. Where I work, I think we have the profile to take this on. For me, the question is: 'is this the right timing?' My feeling is that if our vendor fails us again, the answer will be 'Now !!!'.&lt;/p&gt;

&lt;br&gt;&lt;br&gt;


&lt;h1&gt;Disadvantages of an LB (I think we know these already)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Vendor cost&lt;/li&gt;
&lt;li&gt;Provisioning time&lt;/li&gt;
&lt;li&gt;Vendor reliability&lt;/li&gt;
&lt;li&gt;AppNexus saw 5x lower performance than expected&lt;/li&gt;
&lt;/ul&gt;


&lt;br&gt;&lt;br&gt;


&lt;h1&gt;How did they ditched the LB?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;They rolled their own DNS solution in perl (sounds like open source  options are available)&lt;/li&gt;
&lt;li&gt;The DNS acts as the LB, serving a pool of public IP addresses corresponding to the nodes in the cluster&lt;/li&gt;
&lt;li&gt;To determine active nodes in the cluster, DNS polls nodes for health; Nodes provide a health endpoint.&lt;/li&gt;
&lt;li&gt;Node failures in the cluster are resilient. Each logical node has a public ip address. That public ip is linked to multiple private IPs, corresponding to multiple physical nodes. One of these physicals is the active node, and the others are hot backups. This resiliency strategy is all managed with an open source technology called &lt;a href=&quot;http://www.keepalived.org/&quot; title=&quot;KeepAliveD&quot;&gt;KeepAliveD&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;br&gt;&lt;br&gt;


&lt;h1&gt;The Tradeoffs&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;SSL support requires more work (&lt;a href=&quot;https://www.stunnel.org/index.html&quot; title=&quot;Stunnel&quot;&gt;Stunnel&lt;/a&gt;/&lt;a href=&quot;http://nginx.com/&quot; title=&quot;NGINX&quot;&gt;NGINX&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Limited to 'Round Robin.'  Advanced LB features such 'Least Used CPU' are not available without more developer work.&lt;/li&gt;
&lt;li&gt;You own it, no commercial support&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.keepalived.org/&quot; title=&quot;KeepAliveD&quot;&gt;KeepAliveD&lt;/a&gt; requires multicast. So if you want EC2 hosting, it requires a slightly different approach&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>On Scalability</title>
   <link href="YOUR_URL/scalability.html"/>
   <updated>2013-01-22T00:00:00-05:00</updated>
   <id>BLOG_URL/scalability</id>
   <content type="html">&lt;h1&gt;&lt;a href=&quot;http://blog.tech.renttherunway.com/?attachment_id=280&quot; rel=&quot;attachment wp-att-280&quot;&gt;&lt;img class=&quot;wp-image-280 alignleft&quot; alt=&quot;Carlo Barbara&quot; src=&quot;http://blog.tech.renttherunway.com/wp-content/uploads/2013/01/CAB_bio_pic.jpg&quot; width=&quot;130&quot; height=&quot;112&quot; /&gt;&lt;/a&gt;Intro&lt;/h1&gt;


&lt;p&gt;We use Java and we like it! When I say this to some people, they cringe. They look at me like I'm a dinosaur who doesn't realize his extinction is coming. I usually smirk, I get it. These are folks that or so in love with Ruby/Rails or Python/Django that they forget it's just a tool for solving a certain kind of problem. I can understand why, they are both great tools! I built my personal site in Rails and it was a lot of fun. It's easy to iterate, and the community makes adding value very simple. The problem is you when you fall in love with your hammer, everything looks like a nail. In this post, I'll tell you some of the problems we faced, and why that made a pure 100% Rails app a bad choice for us. Then we will talk about how we are thinking about leveraging Ruby in our stack. But first, a little history is required.&lt;/p&gt;

&lt;h1&gt;Our Old Stack&lt;/h1&gt;


&lt;p&gt;Over three years ago our founders hired some consultants to build an MVP for their vision. They came back with PHP/Drupal and MySQL, a monolithic architecture. It was functional, allowing the founders to start growing the business. Customers were trying it out, and loving the service. The business had legs and traffic was steadily rising. Fast forward to last year, and our infrastructure was handling the flow, but it was creaking loudly. This architecture was fragile, and it didn't scale well in any direction.&lt;/p&gt;

&lt;p&gt;Some of the issues we had with the codebase included:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Monolithic code base. How do you make changes to one part without releasing everything else? How do you this with 20 devs? 100?&lt;/li&gt;
    &lt;li&gt;How do you improve performance in this architecture? Caching will help some if your data is mostly static. Scaling horizontally at this level may not be not enough to increase throughput, it's too coarse and it requires logical separation to avoid DB concurrency issues.&lt;/li&gt;
    &lt;li&gt;Concerns weren't separated, so one component going down risks taking down the whole site. Ideally you have &quot;swim lanes&quot;, basically silos where if any component in the tech stack goes down, only that silo is affected. The product detail page can go down without taking down checkout, the homepage can be unavailable but those on product pages don't notice.&lt;/li&gt;
    &lt;li&gt;How do you support multiple platforms? We don't want to write the same database logic in many different places, and the monolithic code base won't support apps for iphone, android, or ipad.&lt;/li&gt;
    &lt;li&gt;The Drupal Code was spaghetti code. There was SQL in the views and controllers, which meant even making simple view changes was complex and risky. Adding insult to injury, the test coverage was non-existent. This made iterating a dangerous task.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Making it Scale&lt;/h1&gt;


&lt;p&gt;We like to think of Scalability in terms of the AFK Scalability Cube[1]. There are three axes for scaling you application&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;The Y - axis (Splitting architecture out by service or function)&lt;/li&gt;
    &lt;li&gt;The X - axis (Creating N instances of a component, all replicas. Excluding 1 designated for writes. Fronted by a load balancer)&lt;/li&gt;
    &lt;li&gt;The Z - axis (Splitting resources by user characteristics. i.e The West coast on 1 pool, the East on another)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The further along these axes you get, the better your application scales. We know we needed a highly availability and concurrency, so we needed to scale in multiple directions.&lt;/p&gt;

&lt;p&gt;Here is how we made this happen in practice, some of which we are still iterating on:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;(Y axis) We started dismantling the monolithic beast and migrating to a Service Oriented Architecture (SOA), based on Java backend web services.
&lt;ul&gt;
    &lt;li&gt;RESTful web services delivering JSON&lt;/li&gt;
    &lt;li&gt;The concerns are well separated, a service has a specific job and does that job well&lt;/li&gt;
    &lt;li&gt;Easier for development teams to own a full stack of components. This allows us to create small teams which act on goals without spelling out direction, fostering innovation.&lt;/li&gt;
    &lt;li&gt;Allows for more frequent releases&lt;/li&gt;
    &lt;li&gt;Creates disaster isolation: if only that service goes down, the rest of the site should remain available where you don't have cross swim lane dependencies.&lt;/li&gt;
    &lt;li&gt;Why Java? It is easy to test, easier to scale, and more powerful than most high-level languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;(X axis) We have pools of service instances fronted by load balancers.
&lt;ul&gt;
    &lt;li&gt;For a service that is slower or more popular, throw more instances in the pool&lt;/li&gt;
    &lt;li&gt;Since the services themselves are smaller than one big app, you can better leverage hardware resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;(Y axis) The view is thin, and renders whatever the services provide.
&lt;ul&gt;
    &lt;li&gt;Create different view layers for different platforms&lt;/li&gt;
    &lt;li&gt;Services don't care who the client is, they just respond to requests!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;(All) Metrics gathering. You can't make it better if you can't measure it!&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Ruby usage at RTR&lt;/h1&gt;


&lt;p&gt;When I think about SOA and scalability, I think about the JVM. It's stable, proven, and optimized. When you factor in the size of the community and tools available, it makes a great choice for writing your services. I couldn't see myself writing highly concurrent services in Ruby or Python, but maybe it's because I'm not as familiar with those languages. With that said, I haven't heard of many companies with similar performance requirements going down that route either. Going with Java comes with some overhead. It's verbose, and isn't as convention driven. This means it takes devs longer to write/read code and understand APIs. It also means you need strong leadership pushing solid practices, otherwise you can end up with multiple approaches. This is actually where I think Rails excels, convention over configuration speeds up development. So if you don't require high scalability or have a big dev team, Rails might be the way to go. It's definitely faster time to market, and a better tool for building an MVP.&lt;/p&gt;

&lt;p&gt;As we continue to dismantle our monolithic beast and move away from PHP, we want something light and simple that we can control. For that reason, we are moving to Sinatra/Ruby. Stay tuned for more info on how that goes...&lt;/p&gt;

&lt;p&gt;-@CarloBarbara&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Scalability-Rules-Principles-Scaling-Sites/dp/0321753887/ref=sr_1_1?ie=UTF8&amp;amp;qid=1354635203&amp;amp;sr=8-1&amp;amp;keywords=fisher+scalability&quot;&gt;[1] AKF Cube&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Taking The Leap into Fashion...Renting the Runway</title>
   <link href="YOUR_URL/takingtheleap.html"/>
   <updated>2012-11-16T00:00:00-05:00</updated>
   <id>BLOG_URL/takingtheleap</id>
   <content type="html">&lt;p&gt;My last 10 years were spent developing trading and risk software at a top investment bank, but these days I work in fashion. I’m just finishing week two at Rent The Runway. Obviously going from Wall Street to the runway has been a big change, but so far it’s been great and I’m glad I made this decision. Moving to a startup wasn’t a choice I made lightly, and I think my experience is worth sharing as it may resonate with others.&lt;/p&gt;

&lt;p&gt;I was a Vice President (a senior title, but not an executive) at a great firm. I don’t care if it’s in vogue to hate on Wall Street, my employer treated me well and I respect them for that. They offered great perks like excellent training and a top notch wellness program. I had high wealth opportunities with limited risk, and I got to work with very bright people. With that said, everything wasn’t perfect, and I wasn’t 100% content with my job, but life is always about trade-offs. Everything I listed came at the cost of “Big Company Problems”.&lt;/p&gt;

&lt;p&gt;When you work at big company, even at tech firms like Google, you need lots of middle management to support a large organization. That many layers leads to a few problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Way too many meetings. You literally have meetings to prepare for meetings. The same goes for status updates.&lt;/li&gt;
&lt;li&gt;Politics. The successful folks are jockeying to take over turf or protect their own. It may be subtle or indirect, but it still sours culture. It also leads to a lot of micro management.&lt;/li&gt;
&lt;li&gt;More than likely, you’re working with lots of proprietary frameworks or having to spend too much time managing up. The former makes you less marketable, the latter is just meta work, not value add!&lt;/li&gt;
&lt;li&gt;Greenfield opportunities are rare&lt;/li&gt;
&lt;li&gt;More Floaters. These are people who just skate by without taking ownership or adding significant value&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That list may be short, but honestly it’s enough to weigh on you like an anchor. Since I left, I feel light a feather. I wake up excited to come work. Here are few reasons why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our Director of Engineering sets the right tone&lt;/li&gt;
&lt;li&gt;Our Tech team is nails. We are hire sharp Engineers, who care about software and taking pride in their work&lt;/li&gt;
&lt;li&gt;The focus is on working smart, not hard&lt;/li&gt;
&lt;li&gt;Amazing culture. Everyone is helpful, and there are no prima donnas!&lt;/li&gt;
&lt;li&gt;We have the critical scalability and uptime requirements of all eComerce sites, the challenges of reservation matching like ZipCar, and the logistical problems of Netflix but with much more valuable inventory&lt;/li&gt;
&lt;li&gt;Plenty of greenfield opportunities. We are disruptors!&lt;/li&gt;
&lt;li&gt;The interview was technical, not fuzzy. If you’re interview somewhere and the interview is not as technical as you are, turn around and run!&lt;/li&gt;
&lt;li&gt;We have meetings when they are appropriate, and there is plenty of time code&lt;/li&gt;
&lt;li&gt;Politics are nonexistent&lt;/li&gt;
&lt;li&gt;Our company is sub 200 employees, 100 are in the warehouse, and 20+ are in engineering. This means my impact is tremendous,  I get to be a steward of the culture&lt;/li&gt;
&lt;li&gt;I understand our company’s business model. It’s not just “let’s build something cool and figure out how we monetize it”&lt;/li&gt;
&lt;li&gt;I wear what I want!&lt;/li&gt;
&lt;li&gt;Pro woman culture. I have never worked with so many women, it’s refreshing. I’m married and not sleazy; the gender balance makes the company more dynamic&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As you can tell, I drank the Kool-Aid. I understand if you’re skeptical as I’m still on my honeymoon, but the longer-tenured folks share my sentiment. If you like what you read here, reach out. We’re hiring!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Maven Dependencies</title>
   <link href="YOUR_URL/maven-dependencies.html"/>
   <updated>2012-11-13T00:00:00-05:00</updated>
   <id>BLOG_URL/maven-dependencies</id>
   <content type="html">&lt;p&gt;I've been using Maven and never truely understood how dependencies were resolved. Today I took the time to figure it out, so I'm going to document it here for my future reference. First off, pom files are declarative. That means the pom says I reference this jar, but not how to go about referencing the jar (though you provide some hints, i.e. remote repositories).&lt;/p&gt;

&lt;p&gt;Maven uses a waterfall methodology for looking up dependencies defined in the pom file. It looks in these places, in this order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;local repository (~/.m2/repository)&lt;/li&gt;
&lt;li&gt;http://repo.maven.apache.org/maven2/&lt;/li&gt;
&lt;li&gt;Remote Repositories listed in your pom&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There is a bit more magic, if you depend on a snaphot. A snapshot means that version is actively in development and hasn't been released. In that case, maven will check for a new version remotely even if it already exists in the local repo. You can override this behaviour with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;snapshots&amp;gt;
    &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
    &amp;lt;updatepolicy&amp;gt;{always,daily,interval:XXX,never}&amp;lt;/updatepolicy&amp;gt;
&amp;lt;/snapshots&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Rich Armstrong talks about support, culture, and management philosphy</title>
   <link href="YOUR_URL/richarmstrongtalks.html"/>
   <updated>2012-11-12T00:00:00-05:00</updated>
   <id>BLOG_URL/richarmstrongtalks</id>
   <content type="html">&lt;p&gt;Today I heard @RichArmstrong from Fogcreek give a talk on support, culture, &amp;amp; management philosophy. The prepared presentation wasn't very long, but we spent a bunch of time doing QA. There were was a bunch of good information, but it was sort of fragmented. So this will read more like a list of interesting tidbits.&lt;/p&gt;

&lt;p&gt;Regarding support, he spent time talking about delivery and communication. Their company ships a product, so the support team deals with external users often. He shared a story on how to tell a &lt;em&gt;Client&lt;/em&gt; there computer is unplugged. You tell them there is a wire in the back that normally collects dust, and ask them if they can unplug it and blow the dust out. While they are back there, they should notice it's unplugged. It's very indirect, and not normally my style, but I can see the value in that approach. Especially since they pay $$$ for the product.&lt;/p&gt;

&lt;p&gt;There was a talk about email communication, and how the natural tendency is to read emails more hostile then they are intended. To overcome that, especially in the client context, error on the side of verbosity. Another trick that was mentioned is using at least 1 exclamation mark. &quot;That's great&quot;
could be taken as sarcasm, but &quot;That's great!!&quot; won't because you put extra gusto. I'm not sure I buy this, but he said it's worked and there is some science behind it.&lt;/p&gt;

&lt;p&gt;In terms of running operational support he offered this advice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are using cards to keep track of prioritizing work, cards with pretty pictures get done faster. It's magic engagement psychology.&lt;/li&gt;
&lt;li&gt;Fix every problem two ways (immediate &amp;amp; root cause)&lt;/li&gt;
&lt;li&gt;If it won't be fixed right away, make it clear by documenting so the issue isn't raised repeatedly&lt;/li&gt;
&lt;li&gt;Document problems right away, but wait on escalating them. What's recent always seems more important, let it settle first&lt;/li&gt;
&lt;li&gt;Don't cherry pick! i.e. have a shared inbox, and have everyone read it, and pick their issues. Everyone reading duplicates effort. Use a simple round-robin algo.&lt;/li&gt;
&lt;li&gt;If you put a metric up on a board, it will move for 1.5 months. After that it stops moving, so pick a new metric!&lt;/li&gt;
&lt;li&gt;Everyone has authority and ownership. They can escalate up to CEO if necessary, and everyone is authorized to make refunds.&lt;/li&gt;
&lt;li&gt;Make clear error pages. People will pick up the phone as soon as something isn't clear to them.&lt;/li&gt;
&lt;li&gt;Make design decisions clear. i.e. You have a remote with up and down arrows, which one will take you to next slide on your presentation. There is no right choice, so document it or make your design slick so it's intuitive.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In terms of management &amp;amp; culture he made this points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Favor organic growth. Doubling every year, in four years, eventually Seniors are out numbered by under classmen, they will define the culture.&lt;/li&gt;
&lt;li&gt;Favor servant leadership. Show no love of power, just serve your people and the role.&lt;/li&gt;
&lt;li&gt;You need peer trust to influence any organization.&lt;/li&gt;
&lt;li&gt;Give support folks dev days, days out of the support queue. Work on whatever you want.&lt;/li&gt;
&lt;li&gt;Asking for account of time spent is a negative assertion. The developer puts up a wall. People don't want you in their business. Be a servant, they are the expert, help them fix the issues.&lt;/li&gt;
&lt;li&gt;If you make a thruput team x% more productive, that x% will get used up fast. Have a plan for that windfall.&lt;/li&gt;
&lt;li&gt;Career/Executive coaches are a wise investment: ccl.org&lt;/li&gt;
&lt;li&gt;If you have a point to make, make it on multiple occasions. i.e. Beat the drum and get a rhthym, storming the castle once won't be enough.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Sandy Storm Shutin -- My blog is born</title>
   <link href="YOUR_URL/sandy-storm-shutin.html"/>
   <updated>2012-10-29T00:00:00-04:00</updated>
   <id>BLOG_URL/sandy-storm-shutin</id>
   <content type="html">&lt;p&gt;Sandy has basically shutdown NYC and the tri state area. I figured I would use the extra time at home to get my blog going. First, I need to setup the infrastructure. Since I already have a rails app, I thought it made sense to go with Jekyll for a simple static blog. It was very simple to get going, and it's forcing me to get familiar with markdown.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World - About me and this site</title>
   <link href="YOUR_URL/a-test-post.html"/>
   <updated>2012-04-25T00:00:00-04:00</updated>
   <id>BLOG_URL/a-test-post</id>
   <content type="html">&lt;h1&gt;About Me&lt;/h1&gt;

&lt;p&gt;I double concentrated in computer science &amp;amp; math at Columbia College in NYC. I concentrated in Math and Computer Science. A concentration is more like a minor than a major. With that said, most of the valuable stuff comes from work and few a key courses like Data Structures. Self education was key, and the best investment I ever made was in the CLRS textbook.&lt;/p&gt;

&lt;h1&gt;About the Site&lt;/h1&gt;

&lt;p&gt;Most of my experience is in finance, specifically building trading systems. This means I have worked on exchange execution, desktop UIs, P&amp;amp;L tools, logistics tools, and plenty of other custom technologies to support a trading business. This means most of my experiences is in proprietary technologies, Java, and C#.&lt;/p&gt;

&lt;p&gt;I built this site to develop experience with web applications, but more importantly to get familiar with the tech stack that the NYC startup scene is using. I started with making a better interface to www.mobilitywod.com videos. Then I integrated a blog so that I can have a medium to talk about my experiences as an Engineer in NYC.&lt;/p&gt;

&lt;p&gt;I chose to use Ruby on Rails, which has made things very easy. There is a lot of information and strong community around Rails. In addition, &lt;em&gt;Ryan Bates&lt;/em&gt; and &lt;em&gt;Rails Casts Pro&lt;/em&gt; makes things even easier. Here are some of the technologies leveraged by the site:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;omniauth + twitter&lt;/li&gt;
&lt;li&gt;devise&lt;/li&gt;
&lt;li&gt;datatables&lt;/li&gt;
&lt;li&gt;capybara&lt;/li&gt;
&lt;li&gt;twitter bootstrap&lt;/li&gt;
&lt;li&gt;postgres&lt;/li&gt;
&lt;li&gt;factory girl&lt;/li&gt;
&lt;li&gt;nokogiri&lt;/li&gt;
&lt;li&gt;nested forms&lt;/li&gt;
&lt;li&gt;jeykll&lt;/li&gt;
&lt;li&gt;Nokogiri&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 
</feed>